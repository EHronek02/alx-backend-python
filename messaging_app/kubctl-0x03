#!/bin/bash

# --- Variables ---
DEPLOYMENT_FILE="blue_deployment.yaml"
DEPLOYMENT_NAME="django-blue"
SERVICE_URL="http://$(kubectl get svc django-service -o jsonpath='{.spec.clusterIP}'):8000"
TEST_INTERVAL=2  # Seconds between test requests

# --- Step 1: Apply Update ---
apply_update() {
    echo "Applying rolling update to v2.0..."
    kubectl apply -f $DEPLOYMENT_FILE
    
    echo -n "Monitoring rollout..."
    kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=180s
    if [ $? -eq 0 ]; then
        echo "Update successful"
    else
        echo "Update failed"
        exit 1
    fi
}

# --- Step 2: Continuous Availability Test ---
test_availability() {
    echo "ðŸš¦ Starting availability test during update..."
    echo "Testing endpoint: $SERVICE_URL"
    
    while true; do
        response=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
        if [ "$response" != "200" ]; then
            echo "Downtime detected! HTTP $response at $(date)"
        else
            echo -n "âœ“"
        fi
        sleep $TEST_INTERVAL
    done &
    TEST_PID=$!
}

# --- Step 3: Verify Update ---
verify_update() {
    echo -e "\nVerification:"
    echo "Current image versions:"
    kubectl get pods -l app=django-messaging -o jsonpath='{.items[*].spec.containers[*].image}'
    
    echo -e "\nPod status:"
    kubectl get pods -l app=django-messaging
}

# --- Main Execution ---
main() {
    test_availability
    apply_update
    kill $TEST_PID 2>/dev/null
    verify_update
}

main
