pipeline {
    agent any

    environment {
        PROJECT_ROOT = 'messaging_app'  // Dockerfile lives here
        PROJECT_DIR = 'messaging_app/messaging_app'  // Django root
        DOCKER_IMAGE = 'ehronek02/messaging-app'  // <- update with your actual Docker Hub username
        DOCKER_TAG = "${BUILD_ID}-${GIT_COMMIT[0..6]}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'd1c8c382-72b6-4805-a009-7daedd7d9cff',
                    url: 'https://github.com/EHronek02/alx-backend-python.git'
            }
        }

        stage('Set Up Python') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'python3 -m venv .venv'
                    sh '. .venv/bin/activate && pip install --upgrade pip'
                    sh '. .venv/bin/activate && pip install -r ../requirements.txt'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '. .venv/bin/activate && pytest chats/tests.py --junitxml=../test-results/report.xml'
                }
            }
            post {
                always {
                    junit "${PROJECT_ROOT}/test-results/report.xml"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${PROJECT_ROOT}") {
                    sh """
                        docker build -t ${DOCKER_IMAGE}:latest -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials', 
                    usernameVariable: 'DOCKER_USER', 
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                        docker push ${DOCKER_IMAGE}:latest
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
