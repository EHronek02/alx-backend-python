#!/bin/bash

# --- Variables ---
DEPLOYMENT_NAME="django-messaging-app"
SERVICE_NAME="messaging-app-service"
TARGET_REPLICAS=3
LOAD_TEST_DURATION="30s"
LOAD_TEST_THREADS=4
LOAD_TEST_CONNECTIONS=100

# Step 1: scale the Deployment
scale_deployment() {
    echo "Scaling deployment to $TARGET_REPLICAS replicas..."
    kubectl scale deployment/$DEPLOYMENT_NAME --replicas=$TARGET_REPLICAS

    echo -n "Waiting for pods to be ready..."
    kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=90s
    echo "Done"
}

# Step 2: Verify pods
verify_pods() {
    echo "Current Pods:"
    kubectl get pods -l app=django-messaging
}

# step 3: Perform Load Test
load_test() {
    echo "ðŸ“Š Load testing with wrk (10 seconds, 100 connections)..."
    if ! command -v wrk &> /dev/null; then
        echo "wrk not installed. Install with:"
        echo "sudo apt install wrk"
        return 1
    fi

    # Get ClusterIP Service URL
    SERVICE_IP=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.spec.clusterIP}')
    SERVICE_PORT=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.spec.ports[0].port}')
    TEST_URL="http://$SERVICE_IP:$SERVICE_PORT"

    echo "ðŸš€ Starting load test ($LOAD_TEST_DURATION) on $TEST_URL"
    wrk -t$LOAD_TEST_THREADS -c$LOAD_TEST_CONNECTIONS -d$LOAD_TEST_DURATION $TEST_URL
}

# --- Step 4: Monitor Resources ---
monitor_resources() {
    echo "Resource Usage:"
    kubectl top pods -l app=django-messaging
    echo ""
    kubectl top nodes
}

# --- Main Execution ---
main() {
    scale_deployment
    verify_pods
    monitor_resources
    load_test
    monitor_resources  # Check again after load test
}

main
