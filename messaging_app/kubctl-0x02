#!/bin/bash

# =============================================
# Blue-Green Deployment Script
# Deploys new version and switches traffic
# =============================================

# --- Variables ---
BLUE_DEPLOYMENT="blue_deployment.yaml"
GREEN_DEPLOYMENT="green_deployment.yaml"
SERVICE_CONFIG="kubeservice.yaml"
GREEN_VERSION="2.0"
SERVICE_NAME="django-active-service"

# --- Step 1: Deploy Both Versions ---
deploy_versions() {
    echo "üöÄ Deploying Blue (v1) and Green (v2) versions..."
    kubectl apply -f $BLUE_DEPLOYMENT
    kubectl apply -f $GREEN_DEPLOYMENT
    
    echo -n "üïí Waiting for pods to be ready..."
    kubectl wait --for=condition=ready pod -l app=django-messaging --timeout=120s
    echo "‚úÖ Done"
}

# --- Step 2: Verify New Version ---
verify_green() {
    echo "üîç Checking Green version (v$GREEN_VERSION) logs..."
    GREEN_POD=$(kubectl get pods -l version=$GREEN_VERSION -o jsonpath='{.items[0].metadata.name}')
    
    kubectl logs $GREEN_POD | tail -n 20
    echo ""
    kubectl exec $GREEN_POD -- python manage.py check
}

# --- Step 3: Switch Traffic ---
switch_traffic() {
    echo "üîÑ Switching service to Green version (v$GREEN_VERSION)..."
    kubectl patch service $SERVICE_NAME -p '{"spec":{"selector":{"version":"'$GREEN_VERSION'"}}}'
    
    echo "üîÑ Current service endpoints:"
    kubectl get endpoints $SERVICE_NAME
}

# --- Step 4: Clean Up Old Version ---
cleanup_blue() {
    read -p "‚ùì Keep Blue version running? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "üßπ Scaling down Blue version..."
        kubectl scale deployment django-blue --replicas=0
    fi
}

# --- Main Execution ---
main() {
    deploy_versions
    verify_green
    switch_traffic
    cleanup_blue
    
    echo -e "\nüéâ Blue-Green deployment complete!"
    echo "Active version: Green (v$GREEN_VERSION)"
}

main
